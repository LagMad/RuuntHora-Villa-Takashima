/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author WINDOWS 11
 */

public class Admin extends javax.swing.JFrame {
        private DefaultTableModel tableModel;
Map<String, Double> roomTypeCostMap = new HashMap<>();
    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
         tableModel = new DefaultTableModel(new Object[]{"Nama", "ID", "Alamat", "Room Type", "Email", "Check In", "Check Out"}, 0);
        namat.setModel(tableModel);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rt = new javax.swing.JComboBox<>();
        nama = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        no = new javax.swing.JTextField();
        em = new javax.swing.JTextField();
        alm = new javax.swing.JTextField();
        cI = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        in = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        out = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        namat = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Montserrat Black", 0, 36)); // NOI18N
        jLabel1.setText("ADMIN PANEL");

        jLabel2.setText("Nama");

        jLabel3.setText("ID");

        jLabel4.setText("No Telp");

        jLabel5.setText("Email");

        jLabel6.setText("Alamat");

        rt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Item", "Sakura", "Tokyo", "Osaka" }));
        rt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtActionPerformed(evt);
            }
        });

        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionPerformed(evt);
            }
        });

        em.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emActionPerformed(evt);
            }
        });

        alm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                almActionPerformed(evt);
            }
        });

        cI.setBackground(new java.awt.Color(204, 255, 204));
        cI.setText("Check In");
        cI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cIActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Search");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Check In");

        in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inActionPerformed(evt);
            }
        });

        jLabel8.setText("Check Out");

        out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(em, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(alm, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(56, 56, 56))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rt, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cI, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(em, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(35, 35, 35)
                .addComponent(rt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cI, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        namat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nama", "ID", "Alamat", "Room_Type", "Email", "Check_In", "Check_Out"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(namat);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getRoomType(String roomTypeName) {
    String roomType = null;

    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost;encrypt=true;trustServerCertificate=true;databaseName=RuuntHora", "sa", "12345678")) {
        String query = "SELECT room_type FROM ROOM_TYPE WHERE room_type= ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, roomTypeName);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    roomType = resultSet.getString("room_type");
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception appropriately (show a message, log, etc.)
    }

    return roomType;
}
    private void rtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtActionPerformed
        // TODO add your handling code here:
      try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost;encrypt=true;trustServerCertificate=true;databaseName=RuuntHora", "sa", "12345678")) {
    String roomTypeQuery = "SELECT room_type, cost FROM ROOM_TYPE";
    try (PreparedStatement roomTypeStatement = connection.prepareStatement(roomTypeQuery)) {
        try (ResultSet roomTypeResultSet = roomTypeStatement.executeQuery()) {
            while (roomTypeResultSet.next()) {
                String roomTypeName = roomTypeResultSet.getString("room_type");
                double roomTypeCost = roomTypeResultSet.getDouble("cost");

                // Only update the roomTypeCostMap without affecting the combo box
                roomTypeCostMap.put(roomTypeName, roomTypeCost);
            }
        }
    }
} catch (SQLException e) {
    e.printStackTrace();
    // Handle the exception appropriately (show a message, log, etc.)
}

    }//GEN-LAST:event_rtActionPerformed

    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noActionPerformed

    private void emActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emActionPerformed

    private void almActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_almActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_almActionPerformed

    private void cIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cIActionPerformed
    String namaValue = nama.getText();
String idValue = id.getText();
String noValue = no.getText();
String emValue = em.getText();
String almValue = alm.getText();
String inGetext = in.getText();  // Assuming alm1 is the check-in date field
String outGetext = out.getText(); // Assuming alm2 is the check-out date field
 String selectedRoomTypeName = (String) rt.getSelectedItem();
            String selectedRoomType = getRoomType(selectedRoomTypeName);

try {
    // Database-related code
    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost;encrypt=true;trustServerCertificate=true;databaseName=RuuntHora", "sa", "12345678")) {
        // Insert data into the "CUSTOMER" table
        String insertCustomerQuery = "INSERT INTO CUSTOMER (name, id_guest, no_telp, email, address) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement insertCustomerStatement = connection.prepareStatement(insertCustomerQuery, PreparedStatement.RETURN_GENERATED_KEYS)) {
            insertCustomerStatement.setString(1, namaValue);
            insertCustomerStatement.setString(2, idValue);
            insertCustomerStatement.setString(3, noValue);
            insertCustomerStatement.setString(4, emValue);
            insertCustomerStatement.setString(5, almValue);

            // Execute the insert query for CUSTOMER table
            insertCustomerStatement.executeUpdate();
           
             Double roomCost = roomTypeCostMap.getOrDefault(selectedRoomType, 0.0);
            // Get the generated primary key (id_guest)
            try (ResultSet generatedKeys = insertCustomerStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int id_guest = generatedKeys.getInt(1);

                    // Insert check-in and check-out dates into the "orders" table
                    String insertOrdersQuery = "INSERT INTO ORDERS (id_order, id_guest, room_type, total_cost, check_in, check_out) VALUES (?, ?, ?, ?, ?, ?)";
                    try (PreparedStatement insertOrdersStatement = connection.prepareStatement(insertOrdersQuery)) {
                        // Assuming id_order is auto-generated
                        insertOrdersStatement.setString(1, idValue);
                        insertOrdersStatement.setString(2, idValue);
                        insertOrdersStatement.setString(3, selectedRoomType);
                        insertOrdersStatement.setDouble(4, roomCost);
                        insertOrdersStatement.setString(5, inGetext);
                        insertOrdersStatement.setString(6, outGetext);

                        // Execute the insert query for orders table
                        insertOrdersStatement.executeUpdate();

                        // Optionally, update the table in your GUI to reflect the changes in real-time
                        updateTable();
                    }
                } else {
                    // Handle the case where no keys were generated for "CUSTOMER" table
                }
            }
        }
    }
} catch (SQLException e) {
    e.printStackTrace();
    // Handle the exception appropriately (show a message, log, etc.)
}
 // Your existing code for inserting into the database

        // After successfully inserting into the database, add a row to the table
        addRowToTable(namaValue, idValue, almValue,selectedRoomType , emValue, inGetext, outGetext);
    }

    private void addRowToTable(String nama, String id, String alm, String roomType, String email, String checkIn, String checkOut) {
        Object[] rowData = {nama, id, alm, roomType, email, checkIn, checkOut};
        tableModel.addRow(rowData);
    }

    // Modify the keyReleased event for each input field to update the table model
    private void namaKeyReleased(java.awt.event.KeyEvent evt) {                                     
        addDataToTable();
    }                                    

    private void idKeyReleased(java.awt.event.KeyEvent evt) {                                   
        addDataToTable();
    }                                  

    private void noKeyReleased(java.awt.event.KeyEvent evt) {                                   
        addDataToTable();
    }                                  

    private void emKeyReleased(java.awt.event.KeyEvent evt) {                                   
        addDataToTable();
    }                                  

    private void almKeyReleased(java.awt.event.KeyEvent evt) {                                    
        addDataToTable();
    }                                   

    private void inKeyReleased(java.awt.event.KeyEvent evt) {                                   
        addDataToTable();
    }                                  

    private void outKeyReleased(java.awt.event.KeyEvent evt) {                                    
        addDataToTable();
    }

    // Method to update the table model when any of the input fields change
    private void addDataToTable() {
        String namaValue = nama.getText();
        String idValue = id.getText();
        String noValue = no.getText();
        String emValue = em.getText();
        String almValue = alm.getText();
        String inValue = in.getText();
        String outValue = out.getText();

       

        // Add a new row with the current input values
        addRowToTable(namaValue, idValue, noValue, emValue, almValue, inValue, outValue);
    

 updateTable();

    }//GEN-LAST:event_cIActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inActionPerformed
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) namat.getModel();
  

        try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost;encrypt=true;trustServerCertificate=true;databaseName=RuuntHora", "sa", "12345678")) {
            String query = "SELECT name, id_guest, address, room_type, email, check_in, check_out FROM CUSTOMER JOIN ORDERS ON CUSTOMER.id_guest = ORDERS.id_guest";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        Object[] rowData = {
                            resultSet.getString("nama"),
                            resultSet.getString("id_guest"),
                            resultSet.getString("address"),
                            resultSet.getString("room_type"),
                            resultSet.getString("email"),
                            resultSet.getString("check_in"),
                            resultSet.getString("check_out")
                        };
                        model.addRow(rowData);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message, log, etc.)
        }
        
    }
    private void outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        String url = "jdbc:sqlserver://localhost; encrypt=true; trustServerCertificate=true; databaseName=RuuntHora";
        String user = "sa";
        String password = "12345678";




        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alm;
    private javax.swing.JToggleButton cI;
    private javax.swing.JTextField em;
    private javax.swing.JTextField id;
    private javax.swing.JTextField in;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField nama;
    private javax.swing.JTable namat;
    private javax.swing.JTextField no;
    private javax.swing.JTextField out;
    private javax.swing.JComboBox<String> rt;
    // End of variables declaration//GEN-END:variables
}
